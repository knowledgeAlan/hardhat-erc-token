{
    "sourceFile": "contracts/ZcdTestTwo.sol",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1717747796055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1718356968660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,13 +8,16 @@\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n \n contract ZcdTestTwo is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n+    public address awner; \n+    \n     constructor(address initialOwner)\n         ERC20(\"zcdTestTwo\", \"MTK\")\n         Ownable(initialOwner)\n         ERC20Permit(\"zcdTestTwo\")\n     {\n+\n         _mint(msg.sender, 10000000 * 10 ** decimals());\n     }\n \n     function pause() public onlyOwner {\n"
                },
                {
                    "date": 1718357190841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,19 @@\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n \n contract ZcdTestTwo is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n-    public address awner; \n+    public  ownerTest address; \n     \n     constructor(address initialOwner)\n         ERC20(\"zcdTestTwo\", \"MTK\")\n         Ownable(initialOwner)\n         ERC20Permit(\"zcdTestTwo\")\n     {\n+        ownerTest = initialOwner\n \n         _mint(msg.sender, 10000000 * 10 ** decimals());\n+\n     }\n \n     function pause() public onlyOwner {\n         _pause();\n"
                },
                {
                    "date": 1718357255187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,16 +8,16 @@\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n \n contract ZcdTestTwo is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n-    public  ownerTest address; \n+      ownerTest public address ; \n     \n     constructor(address initialOwner)\n         ERC20(\"zcdTestTwo\", \"MTK\")\n         Ownable(initialOwner)\n         ERC20Permit(\"zcdTestTwo\")\n     {\n-        ownerTest = initialOwner\n+        ownerTest = initialOwner;\n \n         _mint(msg.sender, 10000000 * 10 ** decimals());\n \n     }\n"
                },
                {
                    "date": 1718357268707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n \n contract ZcdTestTwo is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n-      ownerTest public address ; \n+      ownerTest address public  ; \n     \n     constructor(address initialOwner)\n         ERC20(\"zcdTestTwo\", \"MTK\")\n         Ownable(initialOwner)\n"
                },
                {
                    "date": 1718357283744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,45 @@\n+// SPDX-License-Identifier: MIT\n+// Compatible with OpenZeppelin Contracts ^5.0.0\n+pragma solidity ^0.8.20;\n+\n+import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n+import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n+import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\n+import \"@openzeppelin/contracts/access/Ownable.sol\";\n+import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n+\n+contract ZcdTestTwo is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n+      ownerTest public address   ; \n+    \n+    constructor(address initialOwner)\n+        ERC20(\"zcdTestTwo\", \"MTK\")\n+        Ownable(initialOwner)\n+        ERC20Permit(\"zcdTestTwo\")\n+    {\n+        ownerTest = initialOwner;\n+\n+        _mint(msg.sender, 10000000 * 10 ** decimals());\n+\n+    }\n+\n+    function pause() public onlyOwner {\n+        _pause();\n+    }\n+\n+    function unpause() public onlyOwner {\n+        _unpause();\n+    }\n+\n+    function mint(address to, uint256 amount) public onlyOwner {\n+        _mint(to, amount);\n+    }\n+\n+    // The following functions are overrides required by Solidity.\n+\n+    function _update(address from, address to, uint256 value)\n+        internal\n+        override(ERC20, ERC20Pausable)\n+    {\n+        super._update(from, to, value);\n+    }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718357317877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import \"@openzeppelin/contracts/access/Ownable.sol\";\n import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n \n contract ZcdTestTwo is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n-      ownerTest public address   ; \n+       address public   ownerTest ; \n     \n     constructor(address initialOwner)\n         ERC20(\"zcdTestTwo\", \"MTK\")\n         Ownable(initialOwner)\n"
                },
                {
                    "date": 1718359411990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,50 +41,5 @@\n         override(ERC20, ERC20Pausable)\n     {\n         super._update(from, to, value);\n     }\n-}\n-// SPDX-License-Identifier: MIT\n-// Compatible with OpenZeppelin Contracts ^5.0.0\n-pragma solidity ^0.8.20;\n-\n-import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n-import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n-import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\n-import \"@openzeppelin/contracts/access/Ownable.sol\";\n-import \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n-\n-contract ZcdTestTwo is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n-      ownerTest address public  ; \n-    \n-    constructor(address initialOwner)\n-        ERC20(\"zcdTestTwo\", \"MTK\")\n-        Ownable(initialOwner)\n-        ERC20Permit(\"zcdTestTwo\")\n-    {\n-        ownerTest = initialOwner;\n-\n-        _mint(msg.sender, 10000000 * 10 ** decimals());\n-\n-    }\n-\n-    function pause() public onlyOwner {\n-        _pause();\n-    }\n-\n-    function unpause() public onlyOwner {\n-        _unpause();\n-    }\n-\n-    function mint(address to, uint256 amount) public onlyOwner {\n-        _mint(to, amount);\n-    }\n-\n-    // The following functions are overrides required by Solidity.\n-\n-    function _update(address from, address to, uint256 value)\n-        internal\n-        override(ERC20, ERC20Pausable)\n-    {\n-        super._update(from, to, value);\n-    }\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1717747796055,
            "name": "Commit-0",
            "content": "// SPDX-License-Identifier: MIT\n// Compatible with OpenZeppelin Contracts ^5.0.0\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\n\ncontract ZcdTestTwo is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\n    constructor(address initialOwner)\n        ERC20(\"zcdTestTwo\", \"MTK\")\n        Ownable(initialOwner)\n        ERC20Permit(\"zcdTestTwo\")\n    {\n        _mint(msg.sender, 10000000 * 10 ** decimals());\n    }\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n\n    // The following functions are overrides required by Solidity.\n\n    function _update(address from, address to, uint256 value)\n        internal\n        override(ERC20, ERC20Pausable)\n    {\n        super._update(from, to, value);\n    }\n}"
        }
    ]
}